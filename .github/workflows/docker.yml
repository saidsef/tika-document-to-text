name: CI
on:
  push:
    branches:
      - master
    paths:
      - "function/**"
      - "ui/**"
      - "test/**"
  pull_request:
    branches:
      - master
    paths:
      - "function/**"
      - "ui/**"
      - "test/**"
jobs:
  python-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.8, 3.9]
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Python ${{ matrix.python-version }} setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: pip install
      run: |
        cd function/
        pip install -r requirements.txt
        pip install flake8
        flake8 . --count --show-source --statistics --ignore=E111,E501 --exit-zero --output-file=flake8tmp.txt
        cat flake8tmp.txt| grep ^[0-9]

  build:
    runs-on: ubuntu-latest
    needs: [python-test]
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set Tag Name
      run: |
        echo "TAG=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "DATE=v$(echo `date +'%Y.%m'`)" >> $GITHUB_ENV
        ls -lha
    - name: Login to DockerHub
      uses: docker/login-action@v1
      if: success()
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: linux/amd64,linux/arm64
    - name: Set up Docker Buildx
      id: buildx
      if: success()
      uses: docker/setup-buildx-action@v1
      env:
        DOCKER_BUILDKIT: 1
    - name: Build and push Docker image - (MAIN)
      uses: docker/build-push-action@v2
      if: success()
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: ./function
        file: ./function/Dockerfile
        platforms: linux/amd64,linux/arm64
        pull: true
        push: false
        tags: docker.io/saidsef/tika-convert-to-text:${{ env.TAG == 'master' && 'latest' || env.TAG }}
    - name: Build and push Docker image - (Server)
      uses: docker/build-push-action@v2
      if: success()
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: ./function
        file: ./function/Dockerfile.server
        platforms: linux/amd64,linux/arm64
        pull: true
        push: false
        tags: docker.io/saidsef/tika-convert-to-text:server-${{ env.TAG == 'master' && 'latest' || env.TAG }}
    - name: Build and push Docker image - (UI)
      uses: docker/build-push-action@v2
      if: success()
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: ./ui
        file: ./ui/Dockerfile
        platforms: linux/amd64,linux/arm64
        pull: true
        push: false
        tags: docker.io/saidsef/tika-convert-to-text:ui-${{ env.TAG == 'master' && 'latest' || env.TAG }}
    - name: Run Trivy vulnerability scanner - (Server)
      uses: aquasecurity/trivy-action@master
      if: success()
      with:
        image-ref: docker.io/saidsef/tika-convert-to-text:server-${{ env.TAG == 'master' && 'latest' || env.TAG }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab - Server
      uses: github/codeql-action/upload-sarif@v1
      if: success()
      with:
        sarif_file: 'trivy-results.sarif'

  k8s-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ ! contains(github.ref, 'master') }}
    steps:
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run K8s test
        run: |
          kubectl cluster-info
          export NS=`cat deployment/kustomization.yml  | grep namespace | awk '{ print $2 }'`
          if [ -z "$NS" ]; then
            export NS='data'
          fi
          kubectl create namespace $NS
          kubectl kustomize deployment/ | kubectl apply -f -
          kubectl get all -n $NS
